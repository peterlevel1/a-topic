var fs = require('fs');
var path = require('path');
var util = require('util');

var t = require('t');
var fo = require('fo');
var async = fo._;

var rCommonjsRequire = /require\s*\(\s*["']([^'"\s]+)["']\s*\)/g;
var pSlice = Array.prototype.slice;

function getRequireArgs(str) {
	str = (str + '')
		.replace(t.utils.rscriptCommentLine, '')
		.replace(t.utils.rscriptCommentAll, '');

	return t.utils.regParts(rCommonjsRequire, str);
}

function isRelative(url) {
	return /^[.]+\//.test(url);
}

function getAbsUrl(url) {
	return path.isAbsolute(url)
		? url
		: path.join(__dirname, url);
}

function error(err) {
	throw err;
}

function noop() {}

function Node(opts) {
}

Node.getStat = function (url, callback) {
	fs.stat(url, function (err, stat) {
		if (err == null) {
			return callback(null, url, stat);
		}

		if (/\.(js|json)$/.test(url)) {
			return callback(new Error('getStat: wrong url: ' + url));
		}

		fs.stat(url + '.js', function (err, stat) {
			if (err == null) {
				return callback(null, url + '.js', stat);
			}

			fs.stat(path.join(url, 'index.js'), function (err, stat) {
				if (err == null) {
					return callback(null, path.join(url, 'index.js'), stat);
				}

				return callback(new Error('getStat: wrong url: ' + url));
			});
		});
	});
};

Node.setDescription = function (baseUrl) {
	Node.desc = {
		baseUrl : baseUrl,
		filenames : [],
		dirnames : [],
		files : [],
		textContents : {},
		pkgs : {},
		mods : {},
		//set paths map
		paths : {},
	};
};

module.exports = function pack(opts) {
	if (!opts.target) {
		throw new Error('no target');
	}
	var target = path.isAbsolute(opts.target)
		? opts.target
		: path.join(process.cwd(), target);

	Node.setDescription(url);

	Node.getStat(target, function (err, url, stat) {
		if (err) {
			throw err;
		}

		if (stat.isDirectory()) {
			packDir();
		} else {
			console.log('not a dir');
		}
	});
};

function init(desc) {

}

function packDir() {
	var desc = Node.desc;
	fo.walkdir(
		url,
		function (file, next) {
			desc.filenames.push(file);
			desc.files.push(file);

			fo.readFile([file, 'utf8'])
			.then(function (str) {
				desc.textContents[file] = str;
				next();
			}, next);
		},
		function (dir) {
			desc.dirnames.push(dir);
			desc.files.push(dir);
		},
		function (err) {
			if (err) {
				throw err;
			}

			init(desc);
		}
	);
}